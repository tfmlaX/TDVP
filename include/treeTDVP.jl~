using Revise, TensorOperations, KrylovKit
Revise.includet("fundamentals.jl")

mutable struct TreeNode
    parent::Int
    children::Vector{Int}
end

mutable struct Tree
    nodes::Vector{TreeNode}
end
Tree() = Tree([TreeNode(0, Vector{Int}())])
function Tree(len::Int)
    tree = Tree()
    for i=1:len-1
        addchild!(tree, i)
    end
    return tree
end

mutable struct TreeNetwork
    tree::Tree
    sites::Vector{AbstractArray}
end
TreeNetwork(sites::Vector{T}) where T<:AbstractArray = TreeNetwork(Tree(length(sites)), sites)

function addchild!(tree::Tree, id::Int)
    1 <= id <= length(tree.nodes) || throw(BoundsError(tree, id))
    push!(tree.nodes, TreeNode(id, Vector{}()))
    child = length(tree.nodes)
    push!(tree.nodes[id].children, child)
    child
end
function addchild!(network::TreeNetwork, id::Int, site)
    addchild!(network.tree, id)
    push!(network.sites, site)
end
function removechild!(tree::Tree, id::Int)
    1 <= id <= length(tree.nodes) || throw(BoundsError(tree, id))
    loopcheck(tree)
    for child in tree.nodes[id].children
        removechild!(tree, child)
    end
    parid = tree.nodes[id].parent
    filter!(x->x!=id, tree.nodes[parid].children)
    deleteat!(tree.nodes, id)
    for (i, node) in enumerate(tree.nodes)
        if node.parent > id
            tree.nodes[i].parent -= 1
        end
        for (j, child) in enumerate(node.children)
            if (child > id)
                tree.nodes[i].children[j] -= 1
            end
        end
    end
end
function removechild!(net::TreeNetwork, id::Int)
    removechild!(net.tree, id)
    deleteat!(net.sites, id)
end

#adds tree2 to tree1 at node id of tree1
function addtree(tree1::Tree, id::Int, tree2::Tree)
    t1=deepcopy(tree1)
    t2=deepcopy(tree2)
    len1 = length(t1.nodes)
    push!(t1.nodes[id].children, len1+1)
    t2.nodes[1].parent = id
    t2.nodes[1].children .+= len1
    for i=2:length(t2.nodes)
        t2.nodes[i].parent += len1
        t2.nodes[i].children .+= len1
    end
    Tree([t1.nodes..., t2.nodes...])
end
#same as above but modifies tree1
function addtree!(tree1::Tree, id::Int, tree2::Tree)
    t2=deepcopy(tree2)
    len1 = length(tree1.nodes)
    push!(tree1.nodes[id].children, len1+1)
    t2.nodes[1].parent = id
    t2.nodes[1].children .+= len1
    for i=2:length(t2.nodes)
        t2.nodes[i].parent += len1
        t2.nodes[i].children .+= len1
    end
    push!(tree1.nodes, t2.nodes...)
end

function addtree(net1::TreeNetwork, id::Int, net2::TreeNetwork)
    TreeNetwork(addtree(net1.tree, id, net2.tree), [net1.sites..., net2.sites...])
end
function addtree!(net1::TreeNetwork, id::Int, net2::TreeNetwork)
    addtree!(net1.tree, id, net2.tree)
    push!(net1.sites, net2.sites...)
end

function bonds(tree::Tree)
    N = length(tree.nodes)
    h = findheadnode(tree)
    r = []
    for i=1:h-1
        push!(r, (tree.nodes[i].parent, i))
    end
    for i=h+1:N
        push!(r, (tree.nodes[i].parent, i))
    end
    r
end
bonds(net::TreeNetwork) = bonds(net.tree)

function bondview(tree::Tree)
    N = length(tree.nodes)
    mat = zeros(Int, N, N)
    for bond in bonds(tree)
        mat[bond...] = 1
        mat[reverse(bond)...] = 1
    end
    mat
end
bondview(net::TreeNetwork) = bondview(net.tree)

#finds the leaves of a tree, ie the sites which are only connected to one other site
function leaves(tree::Tree)
    r=[]
    for (i, node) in enumerate(tree.nodes)
        if length(node.children)==0 || (length(node.children)==1 && node.parent==0)
            push!(r, i)
        end
    end
    r
end
leaves(net::TreeNetwork) = leaves(net.tree)

#return list of node ids starting with id and ending with the head-node such that each element is the parent of the one to its left
function pathtohead(tree::Tree, id::Int)
    path = [id]
    hn = findheadnode(tree)
    i=id
    while i != hn
        i = tree.nodes[i].parent
        push!(path, i)
    end
    return path
end
pathtohead(net::TreeNetwork, id::Int) = pathtohead(net.tree, id)

function pathfromhead(tree::Tree, id::Int)
    path = [id]
    hn = findheadnode(tree)
    i=id
    while i != hn
        i = tree.nodes[i].parent
        push!(path, i)
    end
    return reverse(path)
end
pathfromhead(net::TreeNetwork, id::Int) = pathfromhead(net.tree, id)

function loopcheck(tree::Tree)
    len = length(tree.nodes)
    ids = [findheadnode(tree)]
    for i=1:len
        for child in tree.nodes[i].children
            in(child, ids) && throw(ErrorException("loop found in tree!"))
            push!(ids, child)
        end
    end
end
loopcheck(net::TreeNetwork) = loopcheck(net.tree)

function findheadnode(tree::Tree)
    for i in 1:length(tree.nodes)
        if tree.nodes[i].parent==0
            return i
        end
    end
end
findheadnode(net::TreeNetwork) = findheadnode(net.tree)

function findchild(children::Vector{Int}, id::Int)
    return findfirst(x->x==id, children)
end

function setheadnode!(tree::Tree, id::Int)
    par = tree.nodes[id].parent
    if par != 0
        #set the parent to the head-node
        setheadnode!(tree, par)
        #println("setting parent of $par to $id")
        tree.nodes[par].parent=id
        #println("removing $id as child of $(par)")
        filter!(x->x!=id, tree.nodes[par].children)
        #println("adding $par as child of $id")
        pushfirst!(tree.nodes[id].children, par)
        #println("setting parent of $id to 0")
        tree.nodes[id].parent=0
    end
    tree
end
function setheadnode!(net::TreeNetwork, id::Int)
    par = net.tree.nodes[id].parent
    if par != 0
        #set the parent to the head-node
        setheadnode!(net, par)
        #println("setting parent of $par to $id")
        net.tree.nodes[par].parent=id
        #println("removing $id as child of $par")
        childpos=findchild(net.tree.nodes[par].children, id)
        filter!(x->x!=id, net.tree.nodes[par].children)
        #println("adding $par as child of $id")
        pushfirst!(net.tree.nodes[id].children, par)
        #println("setting parent of $id to 0")
        net.tree.nodes[id].parent=0

        Apar = net.sites[par]
        dpar = size(Apar)
        #println("remove dummy index of old head-node")
        Apar = reshape(Apar, dpar[2:end])
        nd = ndims(Apar)
        IA = collect(1:nd)
        IC = collect(1:nd)
        deleteat!(IC, childpos)
        pushfirst!(IC, childpos)
        net.sites[par] = tensorcopy(Apar, IA, IC)
        #println("add dummy index to new head-node")
        Ahead = net.sites[id]
        net.sites[id] = reshape(Ahead, 1, size(Ahead)...)        
    end
end
            
import Base: print, println
function print(tree::Tree, id::Int)
    loopcheck(tree)
    print(id)
    nochild = length(tree.nodes[id].children)
    if nochild == 1
        print("->")
        print(tree, tree.nodes[id].children[1])
    elseif nochild > 1
        print("->(")
        for child in tree.nodes[id].children[1:end-1]
            print(tree, child)
            print(",")
        end
        print(tree, tree.nodes[id].children[end])
        print(")")
    end
end
print(tree::Tree) = print(tree, findheadnode(tree))## head node won't neccessarily have id 1!
println(tree::Tree) = (print(tree); println())
function print(network::TreeNetwork)
    println(network.tree)
    println(network.sites)
end

function hbathchain(N::Int, d::Int, chainparams)
    b = anih(d)
    bd = crea(d)
    n = numb(d)
    u = unitmat(d)
    e = chainparams[1]
    t = chainparams[2]

    up(H, h, hd) = permutedims(cat(H, h, hd, u; dims=3), [3,1,2])
    down(H, h, hd) = permutedims(cat(u, hd, h, H; dims=3), [3,1,2])

    H=Vector{AbstractArray}()
    for i=1:N-1
        M=zeros(4, 4, d, d)
        M[4, :, :, :] = up(e[i]*n, t[i]*b, t[i]*bd)
        M[:, 1, :, :] = down(e[i]*n, b, bd)
        push!(H, M)
    end
    M=zeros(4, d, d)
    M[:, :, :] = down(e[N]*n, b, bd)
    push!(H, M)
    TreeNetwork(H)
end
hbathchain(N::Int, d::Int, e::Int, t::Int) = hbathchain(N, d, (fill(e, N), fill(t, N-1), nothing))

function threebathmpo(e1, e2, N1, N2, N3, d1, d2, d3, chainparams1, chainparams2, chainparams3)
    u = unitmat(3)
    
    up(H, h, hd) = permutedims(cat(H, h, hd, u; dims=3), [3,1,2])
    down(H, h, hd) = permutedims(cat(u, hd, h, H; dims=3), [3,1,2])

    c1 = chainparams1[3]
    c2 = chainparams2[3]
    c3 = chainparams3[3]

    s2 = unitcol(1, 3)
    s1 = unitcol(2, 3)
       
    Hs = e1*s1*s1' + e2*s2*s2'
    
    M=zeros(1,4,4,4,3,3)
    M[1, :, 1, 1, :, :] = up(Hs, c1*s1*s1', c1*s1*s1')
    M[1, 1, :, 1, :, :] = up(Hs, c2*s2*s2', c2*s2*s2')
    M[1, 1, 1, :, :, :] = up(Hs, c3*(s1*s2'+s2*s1'), c3*(s1*s2'+s2*s1'))

    H = TreeNetwork([M])
    addtree!(H, 1, hbathchain(N1, d1, chainparams1))
    addtree!(H, 1, hbathchain(N2, d2, chainparams2))
    addtree!(H, 1, hbathchain(N3, d3, chainparams3))
    return H
end

function spinbosonmpo(ω0, Δ, d, N, chainparams; rwa=false, tree=false)
    u = unitmat(2)
    
    up(H, h, hd) = permutedims(cat(H, h, hd, u; dims=3), [3,1,2])
    down(H, h, hd) = permutedims(cat(u, hd, h, H; dims=3), [3,1,2])

    c0 = chainparams[3]

    Hs = (ω0/2)*sz + Δ*sx

    M=zeros(1,4,2,2)
    M[1, :, :, :] = up(Hs, rwa ? c0*sm : c0*sx, rwa ? c0*sp : c0*sx)

    chain = hbathchain(N, d, chainparams)
    if tree
        H = TreeNetwork([M])
        addtree!(H, 1, chain)
        return H
    else
        chain = chain.sites
        chain[end] = reshape(chain[end],4,1,d,d)
        return [M, chain...]
    end
end

function physdimsmpo(M::TreeNetwork)
    N = length(M.tree.nodes)
    res = Vector{Int}(undef, N)
    for (i, site) in enumerate(M.sites)
        res[i] = size(site)[end]
    end
    return Dims(res)
end

#CHECK!!!!
#move orthogonality centre to headnode
function mpsrightnorm!(net::TreeNetwork, id::Int)
    loopcheck(net)
    children = net.tree.nodes[id].children
    nc = length(children)
    for (i, child) in enumerate(children)
        length(net.tree.nodes[child].children) >= 1 && (net = mpsrightnorm!(net, child))
        dchild = size(net.sites[child])
        dpar = size(net.sites[id])
        C, AR = lq(reshape(net.sites[child], dchild[1], :))
        net.sites[child] = reshape(Matrix(AR), dchild)
        IC=collect(1:nc+2)
        IA=collect(1:nc+2)
        IC[i+1]=-1
        net.sites[id] = tensorcontract(net.sites[id], IA, C, [i+1,-1], IC)
    end
    return net
end
mpsrightnorm!(net::TreeNetwork) = mpsrightnorm!(net, findheadnode(net))

function mpsmixednorm!(net::TreeNetwork, id::Int)
    1 <= id <= length(net.tree.nodes) || throw(BoundsError(net.tree, id))
    setheadnode!(net, id)
    mpsrightnorm!(net, id)
end

function calcbonddims!(tree::Tree, physdims::Dims, Dmax::Int, M::Array{Int, 2}, id::Int)
    for child in tree.nodes[id].children
        length(tree.nodes[child].children) >= 1 && calcbonddims!(tree, physdims, Dmax, M, child)
        D = physdims[child]
        for grandchild in tree.nodes[child].children
            D *= M[child, grandchild]
        end
        M[id, child] = min(D, Dmax)
        M[child, id] = min(D, Dmax)
    end
end
function calcbonddims(tree::Tree, physdims::Dims, Dmax::Int)
    loopcheck(tree)
    N = length(tree.nodes)
    M = zeros(Int, N, N)
    calcbonddims!(tree, physdims, Dmax, M, findheadnode(tree))
    return M
end
"""
    randisometry([T=Float64], dims...)
Construct a random isometry
"""
randisometry(T, d1, d2) = d1 >= d2 ? Matrix(qr!(randn(T, d1, d2)).Q) : Matrix(lq!(randn(T, d1, d2)).Q)
randisometry(d1, d2) = randisometry(Float64, d1, d2)
randisometry(dims::Dims{2}) = randisometry(dims[1], dims[2])
randisometry(T, dims::Dims{2}) = randisometry(T, dims[1], dims[2])

#constructs random tree mps right normalised towards the head-node
function randmps(tree_::Tree, physdims::Dims, Dmax::Int, T::Type{<:Number} = Float64)
    tree = deepcopy(tree_)
    hn = findheadnode(tree)
    leafnodes = leaves(tree)
    N = length(tree.nodes)
    setheadnode!(tree, leafnodes[1])
    bonddims1 = calcbonddims(tree, physdims, Dmax)
    setheadnode!(tree, leafnodes[2])
    bonddims2 = calcbonddims(tree, physdims, Dmax)
    bonddims = min.(bonddims1, bonddims2)
    setheadnode!(tree, hn)
    
    A = Vector{AbstractArray}(undef, N)
    for (id, node) in enumerate(tree.nodes)
        if id != hn
            Dpar = bonddims[id, node.parent]
            d = physdims[id]
            Dchildren = bonddims[id, node.children]
            A[id] = reshape(randisometry(T, Dpar, prod(Dchildren)*d), Dpar, Dchildren..., d)
        else
            d = physdims[id]
            Dchildren = bonddims[id, node.children]
            A[id] = reshape(randisometry(T, 1, prod(Dchildren)*d), 1, Dchildren..., d)
        end
    end
    TreeNetwork(tree, A)
end
randmps(tree_::Tree, physdims::Int, Dmax::Int, T::Type{<:Number} = Float64) = randmps(tree_, ntuple(i -> physdims, length(tree_.nodes)), Dmax, T)

function normmps(net::TreeNetwork, id::Int)
    nc = length(net.tree.nodes[id].children)
    IA = collect(1:nc+2)
    IB = collect(nc+3:2*nc+4)
    IA[end] = -1 #contract physical indices
    IB[end] = -1 #contract physical indices 
    ρ = tensorcontract(net.sites[id], IA, conj(net.sites[id]), IB)
    for (i, child) in enumerate(net.tree.nodes[id].children)
        ρchild = normmps(net, child)
        nd = (nc+2-i)*2
        halfnd = div(nd,2)
        IA = collect(1:nd)
        IA[2] = -1
        IA[halfnd+2] = -2
        ρ = tensorcontract(ρ, IA, ρchild, [-1, -2])
    end
    return ρ
end
function normmps(net::TreeNetwork; OC=nothing)
    loopcheck(net)
    if typeof(OC) <: Int
        AC = net.sites[OC]
        nd = ndims(AC)
        IA = collect(1:nd)
        return scalar(tensorcontract(AC, IA, conj(AC), IA))
    else
        hn = findheadnode(net)
        ρ = normmps(net, hn)
        return ρ[1]
    end
end

#assumes right normalised tree mps (normalised towards head node)
#check contraction order is optimal
function measure1siteoperator(A::TreeNetwork, O, id::Int)
    1 <= id <= length(A.tree.nodes) || throw(BoundsError(A.tree, id))
    normpath = pathfromhead(A, id)
    N = length(normpath)
    hn = normpath[1]
    nc = length(A.tree.nodes[id].children)
    if id == hn
        IA=collect(1:nc+2)
        IB=collect(1:nc+2)
        IA[end] = -1
        return tensorcontract(tensorcontract(conj(A.sites[id]), IA, O, [-1,-2]), IB, A.sites[id], IB)[1]
    end

    childpos = findchild(A.tree.nodes[hn].children, normpath[2])
    IA = collect(1:nc+1)
    IB = collect(1:nc+1)
    IA[childpos] = -1 #do not contract over leg which leads to id
    ρ = tensorcontract(conj(A.sites[hn]), IA, A.sites[hn], IB)
    for (i, nid) in enumerate(normpath[2:end-1])
        nc = length(A.tree.nodes[nid].children)
        childpos = findchild(A.tree.nodes[nid].children, normpath[i+2]) + 1
        IA = collect(1:nc+2)
        IB = collect(1:nc+2)
        IA[1] = -1
        IA[childpos] = -2
        ρchild = tensorcontract(conj(A.sites[nid]), IA, A.sites[nid], IB)
        ρ = tensorcontract(ρ, [-1,-2], ρchild, [-1,1,-2,2])
    end
    nc = length(A.tree.nodes[id].children)
    IA = collect(1:nc+2)
    IB = collect(1:nc+2)
    IC = collect(1:nc+2)
    IA[end] = -1
    IB[1] = -1
    tensorcontract(tensorcontract(tensorcontract(conj(A.sites[id]), IA, O, [-1,-2]), IB, A.sites[id], IC), [1,2], ρ, [1,2])[1]
end

#dir gives the open index where the parent is dir=1 (or first children if node is the head)
#Fs must be given in the correct order
#left = direction of parent
#right = direction of children
function updateleftenv(A, M, dir::Int)
    @tensor F[a,b,c] := conj(A[a,s'])*M[b,s',s]*A[c,s]
end
function updaterightenv(A, M)
    @tensor F[a,b,c] := conj(A[a,s'])*M[b,s',s]*A[c,s]
end
function updateleftenv(A, M, dir::Int, F0)
    @tensor F[a,b,c] := F0[a0,b0,c0]*conj(A[a0,a,s'])*M[b0,b,s',s]*A[c0,c,s]
end
function updaterightenv(A, M, F1)    
    @tensor F[a,b,c] := F1[a1,b1,c1]*conj(A[a,a1,s'])*M[b,b1,s',s]*A[c,c1,s]
end
function updateleftenv(A, M, dir::Int, F0, F1)# dir in {1,2}
    dir==1 && (Aperm = [1,3,2,4]; Mperm = [1,3,2,4,5])
    dir==2 && (Aperm = [1,2,3,4]; Mperm = [1,2,3,4,5])
    At = permutedims(A, Aperm)
    Mt = permutedims(M, Mperm)
    @tensoropt !(b,b0,b1) F[a,b,c] := F0[a0,b0,c0]*F1[a1,b1,c1]*conj(At[a0,a1,a,s'])*Mt[b0,b1,b,s',s]*At[c0,c1,c,s]
end
function updaterightenv(A, M, F1, F2)
    @tensoropt !(b,b1,b2) F[a,b,c] := F1[a1,b1,c1]*F2[a2,b2,c2]*conj(A[a,a1,a2,s'])*M[b,b1,b2,s',s]*A[c,c1,c2,s]
end
function updateleftenv(A, M, dir::Int, F0, F1, F2)# dir in {1,2,3}
    dir==1 && (Aperm = [1,3,4,2,5]; Mperm = [1,3,4,2,5,6])
    dir==2 && (Aperm = [1,2,4,3,5]; Mperm = [1,2,4,3,5,6])
    dir==3 && (Aperm = [1,2,3,4,5]; Mperm = [1,2,3,4,5,6])
    At = permutedims(A, Aperm)
    Mt = permutedims(M, Mperm)
    @tensoropt !(b,b0,b1,b2) F[a,b,c] := F0[a0,b0,c0]*F1[a1,b1,c1]*F2[a2,b2,c2]*conj(At[a0,a1,a2,a,s'])*Mt[b0,b1,b2,b,s',s]*At[c0,c1,c2,c,s]
end
function updaterightenv(A, M, F1, F2, F3)
    @tensoropt !(b,b1,b2,b3) F[a,b,c] := F1[a1,b1,c1]*F2[a2,b2,c2]*F3[a3,b3,c3]*conj(A[a,a1,a2,a3,s'])*M[b,b1,b2,b3,s',s]*A[c,c1,c2,c3,s]
end

function applyH1(AC, M, F)
    @tensoropt !(b) HAC[a,s'] := F[a,b,c]*AC[c,s]*M[b,s',s]
end
function applyH1(AC, M, F0, F1)
    @tensoropt !(b0,b1) HAC[a0,a1,s'] := F0[a0,b0,c0]*F1[a1,b1,c1]*AC[c0,c1,s]*M[b0,b1,s',s]
end
function applyH1(AC, M, F0, F1, F2)
    @tensoropt !(b0,b1,b2) HAC[a0,a1,a2,s'] := F0[a0,b0,c0]*F1[a1,b1,c1]*F2[a2,b2,c2]*AC[c0,c1,c2,s]*M[b0,b1,b2,s',s]
end
function applyH1(AC, M, F0, F1, F2, F3)
    @tensoropt !(b0,b1,b2,b3) HAC[a0,a1,a2,a3,s'] := F0[a0,b0,c0]*F1[a1,b1,c1]*F2[a2,b2,c2]*F3[a3,b3,c3]*AC[c0,c1,c2,c3,s]*M[b0,b1,b2,b3,s',s]
end
function applyH0(C, F0, F1)
    @tensor HC[α,β] := F0[α,a,α']*C[α',β']*F1[β,a,β']
end

function initenvs!(A::TreeNetwork, M::TreeNetwork, F::Vector{Any}, id::Int)
    for child in A.tree.nodes[id].children
        F = initenvs!(A, M, F, child)
    end
    F[id] = updaterightenv(A.sites[id], M.sites[id], F[A.tree.nodes[id].children]...)
    return F
end
function initenvs(A::TreeNetwork, M::TreeNetwork)
    hn = findheadnode(A)
    N = length(A.tree.nodes)
    F = Vector{Any}(undef, N)
    for child in A.tree.nodes[hn].children
        F = initenvs!(A, M, F, child)
    end
    return F
end

function tdvp1sweep!(dt, A::TreeNetwork, M::TreeNetwork, F=nothing; verbose = false, kwargs...)

    hn = findheadnode(A)
    if hn != findheadnode(M)
        setheadnode!(M, hn)
    end

    F==nothing && (F=initenvs(A,M))
    F0 = fill!(similar(M.sites[1], (1,1,1)), 1)
    children = A.tree.nodes[hn].children
    nc = length(children)
    AC = A.sites[hn]

    #(OC begins on headnode)
    #evolve headnode
    AC, info = exponentiate(x->applyH1(x, M.sites[hn], F0, F[children]...), -im*dt/2, AC; ishermitian=true)

    if verbose
        E = real(dot(AC, applyH1(AC, M.sites[hn], F0, F[children]...)))
        println("Sweep L->R: AC on site $hn, energy = $E")
    end
    
    for (i, child) in enumerate(children)
        grandchildren = A.tree.nodes[child].children
        otherchildren = filter(x->x!=child, children)
        ngc = length(grandchildren)

        #extract C from headnode
        AL, C = QR(AC, i+1)
        F[hn] = updateleftenv(AL, M.sites[hn], i, F0, F[otherchildren]...)

        #evolve C
        C, info = exponentiate(x->applyH0(x, F[hn], F[child]), im*dt/2, C; ishermitian=true)
        if verbose
            E = real(dot(C, applyH0(C, F[hn], F[child])))
            println("Sweep L->R: C between sites $hn and $child, energy = $E")
        end

        #contract C with child
        IA = collect(1:ngc+2)
        IB = collect(1:ngc+2)
        IA[1] = -1
        A.sites[child] = tensorcontract(A.sites[child], IA, C, [1,-1], IB)
        #(OC is now on child)
        
        #evolve child
        A, F = tdvp1sweep!(dt, A, M, F, child; verbose=verbose)

        #extract C from child
        AR, C = QR(A.sites[child], 1)
        A.sites[child] = AR
        F[child] = updaterightenv(AR, M.sites[child], F[grandchildren]...)
        
        #evolve C
        C, info = exponentiate(x->applyH0(x, F[child], F[hn]), im*dt/2, C; ishermitian=true)
        if verbose
            E = real(dot(C, applyH0(C, F[child], F[hn])))
            println("Sweep R->L: C between sites $child and $hn, energy = $E")
        end

        #contract C with headnode
        IA = collect(1:nc+2)
        IB = collect(1:nc+2)
        IA[i+1] = -1
        AC = tensorcontract(AL, IA, C, [i+1,-1], IB)
        #(OC is now on headnode)
    end

    #evolve headnode
    AC, info = exponentiate(x->applyH1(x, M.sites[hn], F0, F[children]...), -im*dt/2, AC; ishermitian=true)
    if verbose
        E = real(dot(AC, applyH1(AC, M.sites[hn], F0, F[children]...)))
        println("Sweep R->L: AC on site $hn, energy = $E")
    end
    A.sites[hn] = AC
    #the tree has now been evolved by one full time step dt
    return A, F
end
function tdvp1sweep!(dt, A::TreeNetwork, M::TreeNetwork, F::Vector{Any}, id::Int; verbose = false, kwargs...)
    children = A.tree.nodes[id].children
    parent = A.tree.nodes[id].parent
    nc = length(children)
    AC = A.sites[id]

    #(OC begins on node)
    #evolve node
    AC, info = exponentiate(x->applyH1(x, M.sites[id], F[parent], F[children]...), -im*dt/2, AC; ishermitian=true)
    if verbose
        E = real(dot(AC, applyH1(AC, M.sites[id], F[parent], F[children]...)))
        println("Sweep L->R: AC on site $id, energy = $E")
    end

    for (i, child) in enumerate(children)
        grandchildren = A.tree.nodes[child].children
        otherchildren = filter(x->x!=child, children)
        ngc = length(grandchildren)

        #extract C from node
        AL, C = QR(AC, i+1)
        F[id] = updateleftenv(AL, M.sites[id], i, F[parent], F[otherchildren]...)

        #evolve C
        C, info = exponentiate(x->applyH0(x, F[id], F[child]), im*dt/2, C; ishermitian=true)
        if verbose
            E = real(dot(C, applyH0(C, F[id], F[child])))
            println("Sweep L->R: C between sites $id and $child, energy = $E")
        end

        #contract C with child
        IA = collect(1:ngc+2)
        IB = collect(1:ngc+2)
        IA[1] = -1
        A.sites[child] = tensorcontract(A.sites[child], IA, C, [1,-1], IB)
        #(OC is now on child)
        
        #evolve child
        A, F = tdvp1sweep!(dt, A, M, F, child; verbose=verbose)

        #extract C from child
        AR, C = QR(A.sites[child], 1)
        A.sites[child] = AR
        F[child] = updaterightenv(AR, M.sites[child], F[grandchildren]...)
        
        #evolve C
        C, info = exponentiate(x->applyH0(x, F[child], F[id]), im*dt/2, C; ishermitian=true)
        if verbose
            E = real(dot(C, applyH0(C, F[child], F[id])))
            println("Sweep R->L: C between sites $child and $id, energy = $E")
        end

        #contract C with node
        IA = collect(1:nc+2)
        IB = collect(1:nc+2)
        IA[i+1] = -1
        AC = tensorcontract(AL, IA, C, [i+1,-1], IB)
        #(OC is now on node)
    end

    #evolve node
    AC, info = exponentiate(x->applyH1(x, M.sites[id], F[parent], F[children]...), -im*dt/2, AC; ishermitian=true)
    if verbose
        E = real(dot(AC, applyH1(AC, M.sites[id], F[parent], F[children]...)))
        println("Sweep R->L: AC on site $id, energy = $E")
    end

    A.sites[id] = AC
    #node id has now been evolved one full time step
    return A, F
end

function productstatemps(tree_::Tree, physdims::Dims, Dmax::Int; statelist=nothing)
    tree=deepcopy(tree_)
    hn = findheadnode(tree)
    leafnodes = leaves(tree)
    N = length(tree.nodes)
    setheadnode!(tree, leafnodes[1])
    bonddims1 = calcbonddims(tree, physdims, Dmax)
    setheadnode!(tree, leafnodes[2])
    bonddims2 = calcbonddims(tree, physdims, Dmax)
    bonddims = min.(bonddims1, bonddims2)
    setheadnode!(tree, hn)

    statelist == nothing && (statelist = [unitcol(1, physdims[i]) for i in 1:N])

    A = Vector{AbstractArray}(undef, N)

    for (id, node) in enumerate(tree.nodes)
        Dpar = id==hn ? 1 : bonddims[id, node.parent]
        Dchildren = bonddims[id, node.children]
        B = zeros(ComplexF64, Dpar, prod(Dchildren), physdims[id])
        for j in 1:min(Dpar, prod(Dchildren))
            B[j,j,:] = statelist[id]
        end
        B = reshape(B, Dpar, Dchildren..., physdims[id])
        A[id] = B
    end
    net = TreeNetwork(tree, A)
    mpsrightnorm!(net)
    return net
end
productstatemps(tree::Tree, physdims::Int, Dmax::Int; statelist=nothing) = productstatemps(tree, ntuple(i -> physdims, length(tree.nodes)), Dmax; statelist=statelist)

