using Revise, TensorOperations
Revise.includet("fundamentals.jl")

function applyH1(AC, M, FL, FR)
    @tensoropt !(b0,b1) HAC[a0,a1,s'] := FL[a0,b0,c0]*FR[a1,b1,c1]*AC[c0,c1,s]*M[b0,b1,s',s]
end
function applyH0(C, FL, FR)
    @tensor HC[α,β] := FL[α,a,α']*C[α',β']*FR[β,a,β']
end
function updateleftenv(A, M, FL)
    @tensor F[a,b,c] := FL[a0,b0,c0]*conj(A[a0,a,s'])*M[b0,b,s',s]*A[c0,c,s]
end
function updaterightenv(A, M, FR)    
    @tensor F[a,b,c] := FR[a1,b1,c1]*conj(A[a,a1,s'])*M[b,b1,s',s]*A[c,c1,s]
end

function initenvs(A::Vector{T1}, M::Vector{T2}) where {T1,T2}
    N = length(A)
    F = Vector{Any}(undef, N+2)
    F[1] = fill!(similar(M[1], (1,1,1)), 1)
    F[N+2] = fill!(similar(M[1], (1,1,1)), 1)
    for k = N:-1:1
        F[k+1] = updaterightenv(A[k], M[k], F[k+2])
    end
    return F
end

function tdvp1sweep!(dt2, A::Vector{T1}, M::Vector{T2}, F=nothing; verbose = false, kwargs...) where {T1,T2}
    N = length(A)
    dt = dt2/2
    if F == nothing
        F = initenvs(A, M)
    end

    AC = A[1]
    for k = 1:N-1

        AC, info = exponentiate(x->applyH1(x, M[k], F[k], F[k+2]), -im*dt, AC; ishermitian = true, kwargs...)

        if verbose
            E = real(dot(AC, applyH1(AC, M[k], F[k], F[k+2])))
            println("Sweep L2R: AC site $k -> energy $E")
        end

        AL, C = QR(AC, 2)
        A[k] = AL
        F[k+1] = updateleftenv(A[k], M[k], F[k])

        C, info = exponentiate(x->applyH0(x,F[k+1],F[k+2]), im*dt, C; ishermitian = true, kwargs...)

        if verbose
            E = real(dot(C, applyH0(C, F[k+1], F[k+2])))
            println("Sweep L2R: C between site $k and $(k+1) -> energy $E")
        end

        @tensor AC[:] := C[-1,1] * A[k+1][1,-2,-3]

    end
    k = N
    AC, info = exponentiate(x->applyH1(x, M[k], F[k], F[k+2]), -2*im*dt, AC; ishermitian = true, kwargs...)

    if verbose
        E = real(dot(AC, applyH1(AC, M[k], F[k], F[k+2])))
        println("Sweep L2R: AC site $k -> energy $E")
    end

    for k = N-1:-1:1

        AR, C = QR(AC, 1)
        A[k+1] = AR
        F[k+2] = updaterightenv(A[k+1], M[k+1], F[k+3])

        C, info = exponentiate(x->applyH0(x, F[k+2], F[k+1]), im*dt, C; ishermitian = true, kwargs...)

        if verbose
            E = real(dot(C, applyH0(C, F[k+2], F[k+1])))
            println("Sweep R2L: C between site $k and $(k+1) -> energy $E")
        end

        @tensor AC[:] := C[-2,1] * A[k][-1,1,-3]
        AC, info = exponentiate(x->applyH1(x, M[k], F[k], F[k+2]), -im*dt, AC; ishermitian = true, kwargs...)

        if verbose
            E = real(dot(AC, applyH1(AC, M[k], F[k], F[k+2])))
            println("Sweep R2L: AC site $k -> energy $E")
        end
    end
    A[1] = AC
    return A, F
end

function normmps(A::Vector{T}; right=false, left=false, cen=nothing) where {T}
    N = length(A)
    if right
        @tensor n[a',b'] := A[1][a',c,s]*conj(A[1][b',c,s])
        return n[1,1]
    elseif left
        @tensor n[a',b'] := A[N][a,a',s]*conj(A[N][a,b',s])
        return n[1,1]
    elseif typeof(cen)==Int
        @tensor n = A[cen][a,b,s]*conj(A[cen][a,b,s])
        return n
    else
        ρ = ones(eltype(A[1]), 1, 1)
        for k=1:N
            @tensor ρ[a,b] := ρ[a',b']*A[k][b',b,s]*conj(A[k][a',a,s])
        end
        return ρ[1,1]
    end
end

function mpsrightnorm!(A::Vector{T}, jq=nothing) where {T}
    nsites = length(A)
    if jq==nothing
        jq=1
    end
    for i=nsites:-1:jq+1
        aleft, aright, aup = size(A[i])
        C, AR = lq(reshape(A[i], aleft, aright*aup))
        A[i] = reshape(Matrix(AR), aleft, aright, aup)
        @tensor AC[:] := A[i-1][-1,1,-3] * C[1,-2]
        A[i-1] = AC
    end
end
function mpsleftnorm!(A::Vector{T}, jq=nothing) where {T}
    nsites = length(A)
    if jq==nothing
        jq=nsites
    end
    for i=1:jq-1
        aleft, aright, aup = size(A[i])
        #        AL, C = qr(reshape(A[i], aleft*aup, aright))##
        AL, C = QR(A[i], 2)
        A[i] = AL
        @tensor AC[:] := C[-1,1] * A[i+1][1,-2,-3]
        A[i+1] = AC
    end
end
function mpsmixednorm!(A::Vector{T}, centre::Int) where {T}
    mpsleftnorm!(A, centre)
    mpsrightnorm!(A, centre)
end

function productstatemps(physdims::Dims, Dmax; statelist=nothing)

    N = length(physdims)

    if typeof(Dmax)<:Number
        Dmax=fill(Dmax, N-1)
    end
    
    bonddims = Vector{Int}(undef, N+1)
    bonddims[1] = 1
    bonddims[N+1] = 1

    if statelist == nothing
        statelist = [unitcol(1, physdims[i]) for i in 1:N]
    end
    
    for i=2:N
        bonddims[i] = min(Dmax[i-1], bonddims[i-1] * physdims[i-1])
    end
    for i=N:-1:2
        bonddims[i] = min(bonddims[i], bonddims[i+1] * physdims[i])
    end
    
    B0 = Vector{Any}(undef, N)
    for i=1:N
        A = zeros(ComplexF64, bonddims[i], bonddims[i+1], physdims[i])
        for j=1:min(bonddims[i], bonddims[i+1])
            A[j,j,:] = statelist[i]
        end
        B0[i] = A
    end

    mpsrightnorm!(B0)
    return B0
end
productstatemps(N, d::Int, Dmax; statelist=nothing) = productstatemps(ntuple(i->d, N), Dmax; statelist=statelist)
